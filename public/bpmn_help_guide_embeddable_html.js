window.bpmn_help_guide_embeddable_html = "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>BPMN Help Guide</title>\n  <style>\n    :root{\n      --bg:#0f0f14; --panel:#15151c; --panel2:#1c1c26; --text:#e8e8f0; --muted:#b8b8c2; --accent:#7c4dff; --accent-2:#9b6bff; --border:#262637; --ok:#2ecc71; --warn:#f39c12; --err:#e74c3c;\n      --radius:14px;\n    }\n    *{box-sizing:border-box}\n    html,body{height:100%}\n    body{margin:0;font:16px/1.55 system-ui, -apple-system, Segoe UI, Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", \"Apple Color Emoji\",\"Segoe UI Emoji\"; background:var(--bg); color:var(--text)}\n    .wrap{max-width:1100px;margin:0 auto;padding:32px 20px}\n    header{display:flex;flex-wrap:wrap;gap:16px;align-items:center;justify-content:space-between;margin-bottom:20px}\n    h1{font-size:28px;margin:0;letter-spacing:0.3px}\n    .search{display:flex;gap:10px;align-items:center;width:100%;max-width:600px;background:var(--panel);padding:10px 14px;border-radius:var(--radius);border:1px solid var(--border)}\n    .search input{flex:1; background:transparent;border:0;outline:none;color:var(--text);font-size:15px}\n    .tagbar{display:flex;flex-wrap:wrap;gap:8px;margin:10px 0 24px}\n    .chip{padding:6px 10px;border:1px solid var(--border);border-radius:999px;background:var(--panel);color:var(--muted);cursor:pointer;font-size:12px}\n    .chip.active{background:linear-gradient(135deg,var(--accent),var(--accent-2));color:white;border-color:transparent}\n\n    details.card{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);overflow:hidden;margin:12px 0}\n    details.card[open]{background:var(--panel2);border-color:#343451}\n    summary{cursor:pointer;list-style:none;padding:16px 18px;display:flex;gap:12px;align-items:center}\n    summary::-webkit-details-marker{display:none}\n    .bullet{width:10px;height:10px;border-radius:3px;background:var(--accent)}\n    .title{font-weight:600}\n    .subtitle{color:var(--muted);font-size:13px}\n    .section{padding:0 20px 18px}\n    .grid{display:grid;gap:10px}\n    .grid.two{grid-template-columns:repeat(auto-fit,minmax(220px,1fr))}\n    .box{background:rgba(255,255,255,0.03);border:1px solid var(--border);border-radius:12px;padding:12px}\n    h3{margin:16px 0 8px;font-size:16px}\n    h4{margin:14px 0 8px;font-size:14px;color:var(--muted);text-transform:uppercase;letter-spacing:0.08em}\n    ul{margin:8px 0 0 18px}\n    code{background:#101018;border:1px solid var(--border);padding:2px 6px;border-radius:6px}\n    .pill{display:inline-block;padding:2px 8px;border-radius:999px;font-size:12px;border:1px solid var(--border);color:var(--muted)}\n    .bad{color:var(--err)} .good{color:var(--ok)} .tip{color:var(--warn)}\n    footer{opacity:.65;margin-top:26px;font-size:13px}\n    a{color:#c9b6ff}\n  </style>\n</head>\n<body>\n  <div class=\"wrap\">\n    <header>\n      <h1>üéØ BPMN Quick Help (for bpmn-js)</h1>\n      <div class=\"search\" role=\"search\">\n        <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" aria-hidden=\"true\"><path stroke=\"#8f8fb0\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"m21 21-4.35-4.35M10.5 18a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15Z\"/></svg>\n        <input id=\"q\" placeholder=\"Search topics (try: start, gateway, boundary, lanes, message)‚Ä¶\" />\n      </div>\n      <div class=\"tagbar\" id=\"tags\"></div>\n    </header>\n\n    <!-- Cards will be injected here -->\n    <div id=\"cards\"></div>\n\n    <footer>\n      Optimized for dark-mode UIs. Drop this file into your app and mount within a modal or side panel. Content focuses on modeling with <code>bpmn-js</code> quick menu actions.\n    </footer>\n  </div>\n\n  <script>\n  // ---- Data Model ---------------------------------------------------------\n  const HELP = [\n    {\n      id: 'start',\n      group: 'Events',\n      title: 'StartEvent ‚Äî Entry point of the process',\n      subtitle: 'Creates the first token in a process or event sub-process.',\n      tags: ['events','start','trigger','message','timer','signal','conditional','multiple','event sub-process'],\n      blocks: [\n        { h3: 'What it is', items: [\n          'Marks where a process (or event sub-process) begins and creates the first token.'\n        ]},\n        { h3: 'Valid types', items: [\n          '<b>Top-level</b>: None, Message, Timer, Conditional, Signal, Multiple.',\n          '<b>Event Sub-Process</b>: Message, Timer, Conditional, Signal, <b>Error</b> (interrupting only), Escalation, Multiple, Parallel Multiple (interrupting / non-interrupting).'\n        ]},\n        { h3: 'Quick menu (bpmn-js)', items: [\n          'Replace ‚Üí switch start type or toggle interrupting in event sub-process.',\n          'Append Task / Gateway / EndEvent.',\n          'Connect with Sequence Flow, add Text Annotation.'\n        ]},\n        { h3: 'Common mistakes', items: [\n          'End-only types (e.g., Terminate, Compensation) are <span class=\"bad\">not</span> StartEvents.',\n          'Error/Escalation Start are only available in an <b>Event Sub-Process</b>.'\n        ]}\n      ]\n    },\n    {\n      id: 'task',\n      group: 'Activities',\n      title: 'Task ‚Äî A unit of work',\n      subtitle: 'A single manual or automated step performed within the process.',\n      tags: ['task','user task','service task','manual task','script','send','receive','business rule','call activity'],\n      blocks: [\n        { h3: 'Task types', items: [\n          'None (generic), <b>User</b>, <b>Manual</b>, <b>Service</b>, <b>Script</b>, <b>Send</b>, <b>Receive</b>, <b>Business Rule</b>, and <b>Call Activity</b> (reusable).'\n        ]},\n        { h3: 'Quick menu', items: [\n          'Replace ‚Üí change task subtype.',\n          'Append Task / Gateway / Intermediate / End.',\n          'Connect via Sequence Flow; add Annotation.'\n        ]},\n        { h3: 'When to use which', items: [\n          '<b>User</b>: human action via UI/form. <b>Service</b>: API/system call. <b>Script</b>: inline logic. <b>Manual</b>: offline work. <b>Send/Receive</b>: messaging. <b>Business Rule</b>: DMN. <b>Call Activity</b>: reuse.'\n        ]},\n        { h3: 'Common mistakes', items: [\n          'Using None Task for everything ‚Äî be explicit later for clarity.',\n          'Confusing Script vs Service: Script runs inside the engine; Service calls out.'\n        ]}\n      ]\n    },\n    {\n      id: 'end',\n      group: 'Events',\n      title: 'EndEvent ‚Äî Where the process finishes',\n      subtitle: 'Consumes the token; multiple ends represent different outcomes.',\n      tags: ['events','end','message','signal','error','escalation','terminate','cancel','compensation','multiple'],\n      blocks: [\n        { h3: 'End types', items: [\n          'None, <b>Message</b>, <b>Signal</b>, <b>Error</b>, <b>Escalation</b>, <b>Terminate</b>, <b>Cancel</b> (for Transactions), <b>Compensation</b>, <b>Multiple</b>.'\n        ]},\n        { h3: 'Quick menu', items: [\n          'Replace ‚Üí swap end type.',\n          'Append/Connect upstream elements; add Annotation.'\n        ]},\n        { h3: 'When to use which', items: [\n          'Message/Signal: notify others; Error: throw problem; Escalation: raise without killing all; Terminate: hard stop; Cancel/Compensation: transaction/rollback.'\n        ]},\n        { h3: 'Common mistakes', items: [\n          'Using Terminate casually (kills all tokens).',\n          'Expecting None End to notify others ‚Äî use Message/Signal.'\n        ]}\n      ]\n    },\n\n    // Gateways\n    {\n      id: 'gw-xor',\n      group: 'Gateways',\n      title: 'Exclusive Gateway (XOR) ‚Äî One path only',\n      subtitle: 'Chooses exactly one outgoing path based on conditions; merges any one incoming token.',\n      tags: ['gateway','exclusive','xor','decision'],\n      blocks: [\n        { h3: 'Quick menu', items: ['Replace to another gateway; append elements; set conditions on outgoing flows.']},\n        { h3: 'Use for', items: ['Mutually exclusive outcomes (approve vs reject).']},\n        { h3: 'Common mistakes', items: ['Forgetting conditions ‚Üí default path always taken.', 'Expecting multiple branches ‚Äî use Inclusive or Parallel.']}\n      ]\n    },\n    {\n      id: 'gw-and',\n      group: 'Gateways',\n      title: 'Parallel Gateway (AND) ‚Äî All paths at once',\n      subtitle: 'Splits into all outgoing paths; merge waits for tokens from all active incoming paths.',\n      tags: ['gateway','parallel','and','synchronization'],\n      blocks: [\n        { h3: 'Use for', items: ['Run tasks in parallel; synchronize later.']},\n        { h3: 'Common mistakes', items: ['Using instead of XOR (when only one branch is needed).','Deadlock by joining paths that may never all arrive.']}\n      ]\n    },\n    {\n      id: 'gw-or',\n      group: 'Gateways',\n      title: 'Inclusive Gateway (OR) ‚Äî One or more paths',\n      subtitle: 'Splits into one or more branches; merge waits for all <i>active</i> incoming tokens.',\n      tags: ['gateway','inclusive','or'],\n      blocks: [\n        { h3: 'Use for', items: ['When multiple conditions can be true simultaneously.']},\n        { h3: 'Common mistakes', items: ['Using XOR when more than one branch may apply.', 'Forgetting merge waits only for active paths.']}\n      ]\n    },\n    {\n      id: 'gw-event',\n      group: 'Gateways',\n      title: 'Event-Based Gateway ‚Äî Wait for first event',\n      subtitle: 'Routes based on whichever event occurs first; only events may follow directly.',\n      tags: ['gateway','event-based','race','timer','message'],\n      blocks: [\n        { h3: 'Use for', items: ['Races like ‚ÄúMessage or Timeout, whichever happens first.‚Äù']},\n        { h3: 'Common mistakes', items: ['Placing tasks directly after it (must be catching events).','Expecting multiple paths ‚Äî only one wins.']}\n      ]\n    },\n    {\n      id: 'gw-complex',\n      group: 'Gateways',\n      title: 'Complex Gateway ‚Äî Advanced synchronization',\n      subtitle: 'Custom split/join rules (e.g., 3 of 5 tokens). Rare; engine support varies.',\n      tags: ['gateway','complex','advanced'],\n      blocks: [\n        { h3: 'Use for', items: ['When no other gateway can model the rule.']},\n        { h3: 'Caution', items: ['Harder to read/maintain; avoid unless necessary.']}\n      ]\n    },\n\n    // Intermediate Events\n    {\n      id: 'ie',\n      group: 'Events',\n      title: 'Intermediate Events ‚Äî Something happens mid-process',\n      subtitle: 'Catching events wait; throwing events send. Inline or attached to activity boundaries.',\n      tags: ['events','intermediate','message','timer','conditional','signal','link','escalation','compensation','boundary','interrupting'],\n      blocks: [\n        { h3: 'Catching', items: ['Message, Timer, Conditional, Signal, Link, Multiple, Parallel Multiple.']},\n        { h3: 'Throwing', items: ['Message, Escalation, Compensation, Signal, Link.']},\n        { h3: 'Boundary events', items: ['Attach to Task/Sub-Process. <b>Solid</b> outline = interrupting, <b>dashed</b> = non-interrupting. Common: Timer, Error, Message, Escalation, Signal, Conditional, Compensation.']},\n        { h3: 'Common mistakes', items: ['Using Start/End icons by accident; throws do not wait; overusing Link events.']}\n      ]\n    },\n\n    // Sub-Processes\n    {\n      id: 'subproc',\n      group: 'Activities',\n      title: 'Sub-Processes ‚Äî Encapsulated parts of the process',\n      subtitle: 'Containers with their own internal flow; can be embedded, reusable, transactional, or event-triggered.',\n      tags: ['activities','sub-process','call activity','transaction','event sub-process','collapse','expand'],\n      blocks: [\n        { h3: 'Types', items: [\n          '<b>Embedded</b> (plus marker): internal flow; not reusable.',\n          '<b>Call Activity</b> (thick border): references reusable process/global task.',\n          '<b>Transaction</b> (double border): all-or-nothing unit; supports Cancel/Compensation.',\n          '<b>Event Sub-Process</b> (dashed): triggered by event; interrupting or non-interrupting.'\n        ]},\n        { h3: 'Quick menu', items: ['Replace type; Expand/Collapse; Append; Attach boundary events; Connect flows; Add annotation.']},\n        { h3: 'Common mistakes', items: ['Overusing embedded sub-processes; forgetting Cancel/Compensation on transactions; assuming event sub-process starts via sequence flow (it does not).']}\n      ]\n    },\n\n    // Artifacts\n    {\n      id: 'artifacts',\n      group: 'Artifacts',\n      title: 'Artifacts ‚Äî Information and context helpers',\n      subtitle: 'Do not move tokens; clarify data, groupings, and notes.',\n      tags: ['artifacts','data object','data store','group','annotation','association'],\n      blocks: [\n        { h3: 'Data Object', items: ['Represents info used/produced; mark as input/output; connect via <b>Data Association</b> (dotted).']},\n        { h3: 'Data Store', items: ['Persistent storage (DB, repo); connect via Data Association.']},\n        { h3: 'Group', items: ['Dashed container for visual grouping only (no execution semantics).']},\n        { h3: 'Text Annotation', items: ['Bracket note with dotted association; explain rules/comments.']},\n        { h3: 'Common mistakes', items: ['Using Sequence Flow instead of Data Association; assuming Group changes execution.']}\n      ]\n    },\n\n    // Swimlanes\n    {\n      id: 'swim',\n      group: 'Collaboration',\n      title: 'Swimlanes ‚Äî Who does the work',\n      subtitle: 'Pools represent participants; Lanes divide responsibility within a pool.',\n      tags: ['pools','lanes','message flow','sequence flow','responsibility'],\n      blocks: [\n        { h3: 'Pool', items: ['Separate participant; tokens do <b>not</b> cross; communicate with <b>Message Flow</b> (dashed). Can be a black box.']},\n        { h3: 'Lane', items: ['Subdivision for roles/teams/components; tokens still move with Sequence Flow within the pool; lanes can nest.']},\n        { h3: 'Message vs Sequence Flow', items: ['Sequence (solid) stays in pool; Message (dashed open arrow) crosses pools and does not carry tokens.']},\n        { h3: 'Common mistakes', items: ['Connecting pools with Sequence Flow; too many lanes; over-modeling externals ‚Äî use black-box pools.']}\n      ]\n    },\n\n    // Wrap-up\n    {\n      id: 'wrap',\n      group: 'Guides',\n      title: 'BPMN ‚Äî Putting it all together',\n      subtitle: 'Practical tips for clear, valid diagrams in bpmn-js.',\n      tags: ['best practices','how to','guide'],\n      blocks: [\n        { h3: 'Core building blocks', items: [\n          'Events (Start/Intermediate/End), Activities (Tasks & Sub-Processes), Gateways, Artifacts, Swimlanes.',\n          'Flows: <b>Sequence</b> (solid, carries token), <b>Message</b> (dashed, across pools), <b>Data Association</b> (dotted).'\n        ]},\n        { h3: 'Quick menu tips', items: ['Replace type; Append next element; Connect flows; Add Annotations.']},\n        { h3: 'Best practices', items: [\n          'Model left‚Üíright; label everything; use lanes only when responsibility matters; collapse sub-processes for readability; handle exceptions with boundary events/event sub-processes; document with artifacts.'\n        ]},\n        { h3: 'Pitfalls', items: ['Mixing Message vs Sequence flows; wrong gateway choice; missing conditions on outgoing flows; treating BPMN as code instead of a communication tool.']}\n      ]\n    }\n  ];\n\n  // ---- Rendering ----------------------------------------------------------\n  const cardsEl = document.getElementById('cards');\n  const tagsEl  = document.getElementById('tags');\n  const qEl     = document.getElementById('q');\n\n  const allTags = Array.from(new Set(HELP.flatMap(x=>x.tags))).sort((a,b)=>a.localeCompare(b));\n  const active = new Set();\n\n  function renderTags(){\n    tagsEl.innerHTML = '';\n    allTags.forEach(t=>{\n      const b = document.createElement('button');\n      b.className = 'chip'+(active.has(t)?' active':'');\n      b.textContent = t;\n      b.onclick = ()=>{ active.has(t) ? active.delete(t) : active.add(t); render(); };\n      tagsEl.appendChild(b);\n    });\n    if(active.size){\n      const clear = document.createElement('button');\n      clear.className = 'chip';\n      clear.textContent = 'clear filters';\n      clear.onclick = ()=>{ active.clear(); qEl.value=''; render(); };\n      tagsEl.appendChild(clear);\n    }\n  }\n\n  function cardTemplate(item){\n    const det = document.createElement('details');\n    det.className = 'card';\n    det.id = item.id;\n    const sum = document.createElement('summary');\n    sum.innerHTML = `<span class=\"bullet\"></span><div><div class=\"title\">${item.title}</div><div class=\"subtitle\">${item.subtitle}</div></div>`;\n    det.appendChild(sum);\n\n    const sec = document.createElement('div');\n    sec.className = 'section';\n\n    // group label\n    const lab = document.createElement('div');\n    lab.style.cssText='font-size:12px;color:var(--muted);text-transform:uppercase;letter-spacing:.12em;margin:0 0 6px 2px';\n    lab.textContent = item.group;\n    sec.appendChild(lab);\n\n    item.blocks.forEach(b=>{\n      const box = document.createElement('div');\n      box.className = 'box';\n      const h = document.createElement('h3');\n      h.innerHTML = b.h3; box.appendChild(h);\n      const ul = document.createElement('ul');\n      b.items.forEach(li=>{ const el = document.createElement('li'); el.innerHTML = li; ul.appendChild(el); });\n      box.appendChild(ul);\n      sec.appendChild(box);\n    });\n\n    // tag pills\n    const tagbox = document.createElement('div');\n    tagbox.style.marginTop = '10px';\n    item.tags.forEach(t=>{ const s = document.createElement('span'); s.className='pill'; s.textContent=t; s.style.marginRight='6px'; tagbox.appendChild(s);});\n    sec.appendChild(tagbox);\n\n    det.appendChild(sec);\n    return det;\n  }\n\n  function render(){\n    cardsEl.innerHTML='';\n    const q = qEl.value.trim().toLowerCase();\n\n    const filtered = HELP.filter(it=>{\n      const text = (it.title+' '+it.subtitle+' '+it.group+' '+it.tags.join(' ')+' '+it.blocks.flatMap(b=>b.items).join(' ')).toLowerCase();\n      const matchesQ = !q || text.includes(q);\n      const matchesTags = !active.size || it.tags.some(t=>active.has(t));\n      return matchesQ && matchesTags;\n    });\n\n    filtered.forEach(it=> cardsEl.appendChild(cardTemplate(it)));\n\n    // auto-open first match on typed search\n    if(q && filtered.length){ filtered[0].__openOnce || (document.getElementById(filtered[0].id).open = true, filtered[0].__openOnce=true); }\n  }\n\n  qEl.addEventListener('input', render);\n\n  renderTags();\n  render();\n  </script>\n</body>\n</html>\n";
